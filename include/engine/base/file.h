#pragma once

#include <filesystem>
#include <fstream>
#include <functional>
#include <string>

namespace oj_file {

/*************************************** dir ***************************************/
/*---------------------------------------------------------------------------------
directory_entry 理解为　dir 内的　item
只遍历指定目录并没有遍历子目录
---------------------------------------------------------------------------------*/
bool dirEarch(std::string_view path, std::function<int(const std::filesystem::directory_entry&)>&& cb);

/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
bool dirEarchAll(std::string_view path, std::function<int(const std::filesystem::directory_entry&)>&& cb);

/*---------------------------------------------------------------------------------
创建目录
---------------------------------------------------------------------------------*/
bool dirMake(std::string_view path);

/*---------------------------------------------------------------------------------
路径是否为目录
---------------------------------------------------------------------------------*/
bool dirIs(std::string_view path);


/*************************************** file ***************************************/
/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
std::string rename(std::string_view path, std::string& name);

/*---------------------------------------------------------------------------------
递归地删除 path 的内容（若它是目录）及其所有子目录的内容，然后删除 p 自身
---------------------------------------------------------------------------------*/
bool remove(std::string_view path);

/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
bool fileRead(const std::string& path, std::string& out);

/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
bool fileWrite(const std::string& path, std::string& in);

/*---------------------------------------------------------------------------------
遍历文件行
---------------------------------------------------------------------------------*/
bool fileLineEarch(const std::string& path, std::function<int(std::string&)>&& cb);

/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
auto splitByExtension(const std::string& fname) -> std::tuple<std::string, std::string, std::string>;

/*---------------------------------------------------------------------------------
递归遍历文件夹查找：特定类型文件里的，特定字符串修改，并将所有文件输出到新文件夹
src：修改前内容
dest：修改后内容
extension：后缀文件
---------------------------------------------------------------------------------*/
std::string reContent(std::string& pathSrc, std::string& pathDest, std::string src, std::string dest, std::string extension = ".txt");


/*************************************** string ***************************************/
/*---------------------------------------------------------------------------------
字符串替换
---------------------------------------------------------------------------------*/
int stringReplace(std::string& str, std::string_view findStr, std::string_view replaceStr);


/*************************************** app ***************************************/
/*---------------------------------------------------------------------------------
返回当前执行文件的名字
---------------------------------------------------------------------------------*/
std::string appName();

/*---------------------------------------------------------------------------------
返回当前执行文件所在路径
---------------------------------------------------------------------------------*/
std::string appDir();

/*---------------------------------------------------------------------------------
返回当前工作目录的绝对路径
---------------------------------------------------------------------------------*/
std::string appWork();

/*---------------------------------------------------------------------------------
更改当前工作目录到 path
---------------------------------------------------------------------------------*/
std::string appWorkSet(std::string_view path);

};  // namespace oj_file