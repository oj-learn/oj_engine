#pragma once

#include "./buffer.h"
#include <cstdint>
#include <functional>
#include <memory>
#include <mutex>
#include <random>
#include <shared_mutex>
#include <unordered_map>
#include <unordered_set>
#include <uuid/uuid.h>

/*---------------------------------------------------------------------------------
命名规则
1: 类型统一 xxx_t
2: 函数统一 小写+下划线
3: 变量统一 小

描述部分：
Elapsed		时间过去；消逝
redirect    重定向
expires     失效，终止, 到期
duration    时长
deltaTime   增量时间
span        跨度
Lnk			链接
Max			最大
Min			最小
sub         减
dec         增1
inc         减1
difference  减
product     乘
quotient    除 quot
remainder   求余 rem
Init		初始化
T/temp		临时
Src			源
Dest		目的
Bottom		底部
equal		等于
below		低于
above		高于
DEF			#define
parent      父
child       子
sibling     同胞
oblique     倾斜,斜角
rbr         红黑树
raw         原始的
queue       队列
wq          等待队列
positive    增益
negative    减益
fd
entry


---------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------

废弃的，不推荐再使用的，放到声明的前面，可以是类，变量，函数，或者其他一些实体的声明
[[deprecated("xxx")]] int fn(){

}
---------------------------------------------------------------------------------*/

//注释方式 1
//---------------------------------------------------------------------------------

//注释方式 2
/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/

//注释方式 3
/***************************************  ***************************************/

/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
using uint = unsigned int;

/*---------------------------------------------------------------------------------
状态定义
---------------------------------------------------------------------------------*/
enum class status_t : int {
    null,
    unknow,
    ptr,
    exist,
    make,
    open,
    interruptcut,
    free,
    wait,
    close,
};

/*---------------------------------------------------------------------------------
channel
---------------------------------------------------------------------------------*/
struct channel_t {
    //-----------------------------------------------------------------------------
    using data_t  = buffer_t::sptr_t;
    using write_t = std::function<status_t(const data_t)>;
    using read_t  = std::function<status_t(data_t&)>;
    using post_t  = std::shared_ptr<write_t>;
    using w_t     = std::weak_ptr<write_t>;
    using r_t     = std::weak_ptr<read_t>;
    //-----------------------------------------------------------------------------
    static auto makeWrite(write_t&& w)
    {
        return std::make_shared<write_t>(std::move(w));
    }
    //-----------------------------------------------------------------------------
    static auto makeRead(read_t&& r)
    {
        return std::make_shared<read_t>(std::move(r));
    }
    //-----------------------------------------------------------------------------
    static w_t nullWrite()
    {
        static auto w = std::make_shared<write_t>([](const data_t) {
            return status_t::ptr;
        });

        return w;
    }
};


//---------------------------------------------------------------------------------


//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

/*---------------------------------------------------------------------------------
GUID
---------------------------------------------------------------------------------*/
long        guidGen();
std::string guidGenStr();

/*---------------------------------------------------------------------------------
rand
---------------------------------------------------------------------------------*/
int rand(int min, int max);

/*---------------------------------------------------------------------------------
---------------------------------------------------------------------------------*/
bool randTrigger(int weight, int max = 1000);